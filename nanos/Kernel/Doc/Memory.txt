

Memory
	Descriptors
	Pages

System


Interface


Internal









To do: Free linear space management

		Memory

======Memory Management======

Descriptors are first allocated and then filled with
	pages(physical memory or aliased)

Tables managed by the MM.

GDT
	Descriptors/LDT

	Gates
IDT
	Gates
	
LDT

======Descriptors======

Descriptors reserves memory in the virtual memory space.

======Interface======

Commands
	Create
	(Resize)
	Edit
	Remove

======Internal======

Free memory - manage in page chunks
	Table?
		Pages 1048576 = 1Mpage

		Start:	XXXXXh
		Length	XXXXXh
		All mem free:	1 entry	= 5B
		Some mem:	205 entries(5B) ~= 1024B
				128 entries(8B) = 1024B

			256 entries

		Start:	XXXXXh
		Length: XXXh
		All mem free:	256 entries = 256 * 4B = 1024B


	Map?
		1bit/page
		4GB = 32 pages = 128kB
		1GB = 8 pages = 32kB
		128MB = 1 page = 4kB
	Other?

Kernel internals
	Resize of descriptors where it reaches another descriptor
		- requires change of descriptors and paging

======Paging======

Allocate/Deallocate

Aliasing/Mirror page
	Fill with address(already filled, aliasing)
		- Have a seperate list of aliased pages containing:
			How many alias version a page has
			(not knowing where they are, only how many)
		- List of real pages

Physical memory(for DMA, video)
	* reserve in the beginning in a descriptor filled)
	* Access via aliasing


======Interface======

Allocate Page(Memory)
	In:	Descriptor+offset=V Addres
		Size(n pages)
		Data(u/s, r/w, on demand - allocate when accessed)

Map to physical RAM (VGA, BIOS) - Might be replaced with the next "Alias"
	In:	Address
		To:		Descriptor
				Offser(Page)

Alias Page(Mirror)
	In:	From:	Descriptor
				Offset(Page)
		To:		Descriptor
				Offser(Page)


======Internal======

Page entry
	Avail.(Note only 3 avail, one must go!)
		Page Aliased		1b
		Descriptor Aliased	1b
		On demand		1b
		Cacheable(Disk,Network=Slow resources)	1b

Page Tables
	* Ordinary(used memory)
	* Free Memory(Stack structure)
		Use stack to manage free (physical)memory
		in chunks of Pages(4kB)
		Stack size(when all memory free) Memory - Stack size
			RAM Memory = Stack Size = Pages
			4GB = 4MB = 1024 pages
			32MB = 32kB = 8 pages
			

======Later ideas======			
On demand
	- allocate on access
	- deallocate, reallocate on access(or not, ordinary deallocation)
