     1                                  %include '../const.asm'
     2                              <1> global   mem
     3                              <1> 
     4                              <1> ;=========Placement of Loader + Data=============
     5                              <1> memseg   equ  2000h ;start memory: segment
     6                              <1> mem      equ  (memseg * 10h)
     7                              <1> 
     8                              <1> stack_esp   equ 1000h - 4
     9                              <1> 
    10                              <1> IRQBase	equ	20h
    11                              <1> 
    12                              <1> ;Nanos Data Area
    13                              <1> ;Where Nanos places its parameters
    14                              <1> 
    15                              <1> Loader_init: ;Location of data
    16                              <1> .data_end	equ	200h-4	;next segment after loaded data
    17                              <1> 
    18                              <1> 
    19                              <1> 
    20                              <1> 
    21                              <1> Nanos_init:
    22                              <1> ;BIOS memory:
    23                              <1> ;0	old IDT
    24                              <1> ;0	Nanos Data
    25                              <1> .MemSize		equ	0
    26                              <1> .lin_FPT		equ	4
    27                              <1> .lin_FPT_Size	equ	8
    28                              <1> 
    29                              <1> ;400h	BIOS data
    30                              <1> 
    31                                  
    32                                  %include 'macro.asm'
    33                              <1> %macro disp 2
    34                              <1>     mov  cx, %2 - %1
    35                              <1>     mov  si, %1
    36                              <1>     call printstring
    37                              <1> %endmacro
    38                                  
    39                                  ;===================================
    40                                  ;Nanos Boot Loader
    41                                  ;
    42                                  ; - Report to RS232 9600bps 8 bits 1 stop no flow control
    43                                  ;
    44                                  ; 1 Read fat table
    45                                  ; 2 Load:
    46                                  ;	nanos.bin:memseg
    47                                  ;	nanos.ini
    48                                  ;		files in nanos.ini
    49                                  ; 3 Start Pmode
    50                                  ; 4 jump to startup code
    51                                  ;===================================
    52                                  
    53                                  
    54                                  ;Start
    55                                  [BITS 16]
    56                                  [ORG 0000h]
    57                                  
    58                                  %include 'fat12.asm'
    59                              <1> ;FAT12 data
    60                              <1> 
    61                              <1> BPB_BytsPerSec	equ	0200h
    62                              <1> BPB_SecPerClus	equ	1
    63                              <1> BPB_RsvdSecCnt	equ	1
    64                              <1> BPB_NumFATs	equ	2
    65                              <1> BPB_RootEntCnt	equ	00E0h
    66                              <1> BPB_TotSec16	equ	0B40h
    67                              <1> BPB_Media		equ	0F0h
    68                              <1> BPB_FATSz16	equ	9
    69                              <1> BPB_SecPerTrk	equ	0012h
    70                              <1> BPB_NumHeads	equ	2
    71                              <1> BPB_HiddSec	equ	0
    72                              <1> BPB_TotSec32	equ	0
    73                              <1> 	
    74                              <1> BS_DrvNum		equ	00h
    75                              <1> BS_Reserved1	equ	00h
    76                              <1> BS_BootSig	equ	29h
    77                              <1> BS_VolID		equ	1086ADCBh
    78                              <1> 
    79 00000000 EB3C                <1> jmp short start
    80 00000002 90                  <1> times 3-($-$$) nop
    81 00000003 4D53444F53352E30    <1> 	db 'MSDOS5.0'	;OEM Name
    82 0000000B 0002                <1> 	dw BPB_BytsPerSec
    83 0000000D 01                  <1> 	db BPB_SecPerClus
    84 0000000E 0100                <1> 	dw BPB_RsvdSecCnt
    85 00000010 02                  <1> 	db BPB_NumFATs
    86 00000011 E000                <1> 	dw BPB_RootEntCnt
    87 00000013 400B                <1> 	dw BPB_TotSec16
    88 00000015 F0                  <1> 	db BPB_Media
    89 00000016 0900                <1> 	dw BPB_FATSz16
    90 00000018 1200                <1> 	dw BPB_SecPerTrk
    91 0000001A 0200                <1> 	dw BPB_NumHeads
    92 0000001C 00000000            <1> 	dd BPB_HiddSec
    93 00000020 00000000            <1> 	dd BPB_TotSec32
    94                              <1> 	
    95 00000024 00                  <1> 	db BS_DrvNum
    96 00000025 00                  <1> 	db BS_Reserved1
    97 00000026 29                  <1> 	db BS_BootSig
    98 00000027 CBAD8610            <1> 	dd BS_VolID
    99 0000002B 4E4F204E414D452020- <1> 	db 'NO NAME    '	; 11 bytes Volume Label
   100 00000034 2020                <1>
   101 00000036 4641543132202020    <1> 	db 'FAT12   '		; 8 bytes  File System
   102                              <1> times 62 - ($-$$)	db 'E';rror
   103                              <1> times ($-$$) - 62	db 'E';rror
   104                              <1> 
   105                              <1> ;Boot sector:
   106                              <1> FAT_Offset:
   107                              <1> ;FAT:
   108                              <1> ;	BS_jmpBoot		equ	0  ;3
   109                              <1> ;	BS_OEMName		equ	3  ;8
   110                              <1> ;	.BPB_BytsPerSec	equ	11 ;2
   111                              <1> ;	.BPB_SecPerClus	equ	13 ;1
   112                              <1> ;	BPB_RsvdSecCnt	equ	14 ;2
   113                              <1> ;	BPB_NumFATs		equ	16 ;1
   114                              <1> ;	BPB_RootEntCnt	equ	17 ;2
   115                              <1> ;	BPB_TotSec16		equ	19 ;2
   116                              <1> ;	BPB_Media		equ	21 ;1
   117                              <1> ;	BPB_FATSz16		equ	22 ;2
   118                              <1> ;	BPB_SecPerTrk		equ	24 ;2
   119                              <1> ;	BPB_NumHeads		equ	26 ;2
   120                              <1> ;	BPB_HiddSec		equ	28 ;4
   121                              <1> ;	BPB_TotSec32		equ	32 ;4
   122                              <1> 	
   123                              <1> ;FAT16:	;FAT12, FAT16
   124                              <1> ;	.BS_DrvNum	equ	36 ;1
   125                              <1> ;	.BS_Reserved1	equ	37 ;1
   126                              <1> ;	.BS_BootSig	equ	38 ;1
   127                              <1> ;	.BS_VolID		equ	39 ;4 
   128                              <1> ;	.BS_VolLab	equ	43 ;11
   129                              <1> ;	.BS_FilSysType	equ	54 ;8
   130                              <1> 
   131                              <1> 	
   132                              <1> ;FAT Byte Directory Entry Structure
   133                              <1> 	DIR_Name			equ	0	;11
   134                              <1> 	DIR_Attr			equ	11	;1
   135                              <1> 	DIR_NTRes			equ	12	;1
   136                              <1> 	DIR_CrtTimeTenth	equ	13	;1
   137                              <1> 	DIR_CrtTime		equ	14	;2
   138                              <1> 	DIR_CrtDate		equ	16	;2
   139                              <1> 	DIR_LstAccDate		equ	18	;2	
   140                              <1> 	DIR_FstClusHI		equ	20	;2	First high cluster number(FAT32 only)
   141                              <1> 	DIR_WrtTime		equ	22	;2
   142                              <1> 	DIR_WrtDate		equ	24	;2
   143                              <1> 	
   144                              <1> 	DIR_FstClus		equ	26	;2	First low cluster number
   145                              <1> 	DIR_FstClusLO		equ	26	;2	First low cluster number
   146                              <1> 	
   147                              <1> 	DIR_FileSize		equ	28	;4
   148                              <1> 	
   149                              <1> ;Attributes
   150                              <1> 	ATTR_READ_ONLY	equ 0x01
   151                              <1> 	ATTR_HIDDEN	equ 0x02
   152                              <1> 	ATTR_SYSTEM	equ 0x04
   153                              <1> 	ATTR_VOLUME_ID	equ 0x08
   154                              <1> 	ATTR_DIRECTORY equ 0x10
   155                              <1> 	ATTR_ARCHIVE	equ 0x20
   156                              <1> 	ATTR_LONG_NAME equ ATTR_READ_ONLY | ATTR_HIDDEN | ATTR_SYSTEM | ATTR_VOLUME_ID
   157                              <1> 
   158                              <1> ;Macron
   159                              <1> 
   160                              <1> FATSz equ BPB_FATSz16
   161                              <1> 
   162                              <1> FirstRootDirSecNum equ BPB_RsvdSecCnt + (BPB_NumFATs * FATSz);
   163                              <1> RootDirSectors equ ((BPB_RootEntCnt * 32) + (BPB_BytsPerSec - 1)) / BPB_BytsPerSec;
   164                              <1> 
   165                              <1> TotSec equ BPB_TotSec16
   166                              <1> 
   167                              <1> ;N = cluster number
   168                              <1> 
   169                              <1> FirstDataSector equ BPB_RsvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   170                              <1> 
   171                              <1> ;%Macro
   172                              <1> ;FirstSectorofCluster = ((N - 2) * BPB_SecPerClus) + FirstDataSector
   173                              <1> 
   174                              <1> ;FATOffset = N + (N / 2)
   175                              <1> 
   176                              <1> ;ThisFATSecNum = BPB_ResvdSecCnt + (FATOffset / BPB_BytsPerSec);
   177                              <1> ;ThisFATEntOffset = REM(FATOffset / BPB_BytsPerSec);
   178                              <1> 
   179                              <1> ;if (FATContents >= 0FF8h) EOF=True
   180                              <1> 
   181                                  
   182                                  start:
   183 0000003E FA                      	cli
   184 0000003F 6A00                    	push	byte 0
   185 00000041 17                      	pop	ss
   186 00000042 BC007C                  	mov  sp, 07C00h
   187 00000045 FB                      	sti
   188                                  		
   189 00000046 EA[4B00]C007            	jmp	07C0h:.start
   190                                  .start:
   191 0000004B 0E                      	push	cs
   192 0000004C 1F                      	pop	ds
   193                                  
   194                                  	;show bootloader message
   195                                  	disp osstart, osend
   196 0000004D B90900              <1>  mov cx, %2 - %1
   197 00000050 BE[DF01]            <1>  mov si, %1
   198 00000053 E86801              <1>  call printstring
   199                                  	
   200                                  FAT:
   201 00000056 E8FE00                  	call	reset	;reset disk
   202                                  	
   203                                  	;in reverse order
   204                                  	Dat_Seg	equ	2000h
   205                                  	FAT_Seg	equ	Dat_Seg - FATSz * BPB_BytsPerSec / 10h
   206                                  	Dir_Seg	equ	FAT_Seg - RootDirSectors * BPB_BytsPerSec / 10h
   207                                  	%if Dir_Seg < 7E0h
   208                                  		%error "tables overwrites boot code"
   209                                  	%endif
   210                                  	
   211                                  		
   212                                  	;Load Directory:
   213 00000059 B81300                  	mov	ax, FirstRootDirSecNum
   214 0000005C B90E00                  	mov	cx, RootDirSectors
   215 0000005F BA201D                  	mov	dx, Dir_Seg
   216 00000062 E80A01                  	call	Load_Sectors
   217                                  
   218                                  	;Load FAT
   219 00000065 B80100                  	mov	ax, BPB_RsvdSecCnt
   220 00000068 B90900                  	mov	cx, FATSz
   221                                  	;mov	dx, FAT_Seg
   222 0000006B E80101                  	call	Load_Sectors
   223                                  	
   224                                  	;Loader
   225                                  		;Load nanos.bin
   226 0000006E BE[C901]                		mov	si, nanos_loader
   227 00000071 E88200                  		call	Load_File	;(ds:si filename, dx Segment)
   228                                  		
   229                                  		;Save nanos.dat memory segment
   230 00000074 52                      		push	dx
   231                                  		
   232                                  			;Load nanos.dat
   233 00000075 BE[D401]                			mov	si, init_file
   234 00000078 E87B00                  			call	Load_File	;(ds:si filename, dx Segment)
   235                                  
   236 0000007B 5B                      		pop	bx
   237                                  
   238                                  	;analyze nanos.dat
   239 0000007C 8EDB                    		mov	ds, bx
   240 0000007E 31F6                    		xor	si, si	;ds:si = nanos.dat
   241                                  	
   242                                  	
   243                                  	scan_dat:		
   244 00000080 803C3A                  		cmp	[si], byte ':'
   245 00000083 7516                    		jne	done
   246                                  		
   247 00000085 83C603                  		add	si, byte 3		
   248                                  		
   249 00000088 89D0                    		mov	ax, dx
   250 0000008A 29D8                    		sub	ax, bx
   251 0000008C 89440B                  		mov	[si + 11], ax		;Save start of file
   252                                  		
   253 0000008F 56                      		push	si
   254 00000090 53                      		push	bx
   255 00000091 E86200                  			call	Load_File	;(ds:si filename, dx Segment)
   256 00000094 5B                      		pop	bx
   257 00000095 5E                      		pop	si
   258                                  		
   259 00000096 83C60D                  		add	si, byte 11+2	;step over filename + cr + lf
   260                                  		
   261 00000099 EBE5                    		jmp	scan_dat
   262                                  		
   263                                  	done:
   264                                  	;Save next segment after the last data segment
   265 0000009B 31F6                    	xor	si, si	;ds:si = nanos.dat
   266 0000009D 81C6FC01                	add	si, Loader_init.data_end
   267 000000A1 8914                    	mov	[si], dx		;dx = segment after loaded data
   268                                  	
   269 000000A3 8CDB                    	mov	bx, ds
   270                                  
   271 000000A5 FA                      	cli
   272 000000A6 0E                      	push	cs
   273 000000A7 1F                      	pop	ds
   274                                  		
   275                                  	;Turn off floppy motor
   276 000000A8 BAF203                  	mov	dx, 03f2h
   277 000000AB B000                    	mov	al, 0
   278 000000AD EE                      	out	dx, al
   279                                  
   280                                  	;Start PMode
   281                                  	%include 'pmode.asm'	
   282                              <1> 
   283                              <1> 	;Initiate Pmode
   284                              <1> 	;bx = seg pointer at nanos.dat
   285                              <1> 
   286                              <1> 	%include 'a20.asm'
   287                              <2> ;Enable A20 via keyboard controller
   288                              <2> 
   289 000000AE E80D00              <2>     call .wait		
   290                              <2> 
   291 000000B1 B0D1                <2>     mov al,0D1h    ;Send 0D1h command (A20 control)
   292 000000B3 E664                <2>     out 64h,al
   293                              <2> 
   294 000000B5 E80600              <2>     call .wait
   295                              <2> 
   296 000000B8 B0DF                <2>     mov al,0dfh
   297 000000BA E660                <2>     out 60h,al     ;Send 0DFh command (Enable)
   298                              <2> 
   299 000000BC EB0A                <2>     jmp short .end
   300                              <2> 
   301                              <2> .wait:
   302 000000BE B9FFFF              <2>     mov cx, 0FFFFh
   303                              <2> .w:
   304 000000C1 E464                <2>     in al,64h      ;Get keybord controller status
   305 000000C3 A802                <2>     test al,2
   306 000000C5 E0FA                <2>     loopnz .w      ;Wait until ready
   307 000000C7 C3                  <2>     ret
   308                              <2> .end:
   309                              <2> 
   310                              <2> 
   311                              <2> 
   312                              <2> ;enable_A20: ;(from http://www.mega-tokyo.com/os/os-faq-memory.html#enable_a20)
   313                              <2> ; cli
   314                              <2> 
   315                              <2> ; call    a20wait
   316                              <2> ; mov     al,0xAD
   317                              <2> ; out     0x64,al
   318                              <2> 
   319                              <2> ; call    a20wait
   320                              <2> ; mov     al,0xD0
   321                              <2> ; out     0x64,al
   322                              <2> 
   323                              <2> ; call    a20wait2
   324                              <2> ; in      al,0x60
   325                              <2> ; push    eax
   326                              <2> 
   327                              <2> ; call    a20wait
   328                              <2> ; mov     al,0xD1
   329                              <2> ; out     0x64,al
   330                              <2> 
   331                              <2> ; call    a20wait
   332                              <2> ; pop     eax
   333                              <2> ; or      al,2
   334                              <2> ; out     0x60,al
   335                              <2> 
   336                              <2> ;         call    a20wait
   337                              <2> ; mov     al,0xAE
   338                              <2> ; out     0x64,al
   339                              <2> 
   340                              <2> ; call    a20wait
   341                              <2> ; ret
   342                              <2> 
   343                              <2> ; a20wait:
   344                              <2> ; .l0:mov     ecx,65536
   345                              <2> ; .l1:in      al,0x64
   346                              <2> ; test    al,2
   347                              <2> ; jz      .l2
   348                              <2> ; loop    .l1
   349                              <2> ; jmp     .l0
   350                              <2> ; .l2:ret
   351                              <2> 
   352                              <2> 
   353                              <2> ; a20wait2:
   354                              <2> ; .l0:mov     ecx,65536
   355                              <2> ; .l1:in      al,0x64
   356                              <2> ; test    al,1
   357                              <2> ; jnz     .l2
   358                              <2> ;         loop    .l1
   359                              <2> ; jmp     .l0
   360                              <2> ; .l2:ret
   361                              <1> 
   362 000000C8 0F0116[E801]        <1> 	lgdt [gdtr]	;points at ds:gdtr	 ;A temporary GDT for initiation
   363                              <1> 
   364                              <1> 	;Enable PMode
   365 000000CD 0F20C0              <1> 	mov  eax,cr0
   366 000000D0 0C01                <1> 	or   al, 1
   367 000000D2 0F22C0              <1> 	mov  cr0,eax		;Pmode Enabled
   368                              <1> 
   369                              <1> 	;Selectors	
   370 000000D5 B80800              <1> 	mov  ax, 1 << 3	   ;1 = Data Selector
   371 000000D8 8ED8                <1> 	mov  ds, ax
   372 000000DA 8EC0                <1> 	mov	es, ax
   373 000000DC 8ED0                <1> 	mov  ss, ax
   374 000000DE 66B8FC0F0000        <1> 	mov eax, stack_esp
   375 000000E4 6689C4              <1> 	mov esp, eax
   376                              <1> 
   377                              <1> ;PMode running on ds and es
   378                              <1> 	;dx = segment after module data
   379                              <1> 	
   380                              <1> ;jump to loaded code(Nanos, Loader.asm)
   381 000000E7 66EA000002001000    <1> jmp dword (2 << 3):mem ;entering Pmode, 2 = Code Selector
   382                              <1> 
   383                                  
   384                                  reboot:
   385 000000EF B058                    	mov	al, 'X'
   386 000000F1 E8C300                  	call	Cdisp
   387 000000F4 EBFE                    	jmp $
   388                                  	
   389                                  Disk:
   390                                  	%include 'disk.asm'
   391                              <1> Load_File:	;(ds:si filename, dx Segment)
   392                              <1> 	;ds:si = pointer to filename(FAT format)
   393                              <1> 	;dx = segment to load the file
   394                              <1> 
   395 000000F6 B02F                <1> 	mov	al, '/'
   396 000000F8 E8BC00              <1> 	call Cdisp
   397                              <1> 
   398 000000FB B8201D              <1> 	mov	ax, Dir_Seg
   399 000000FE 8EC0                <1> 	mov	es, ax
   400 00000100 31FF                <1> 	xor	di, di
   401 00000102 FC                  <1> 	cld
   402 00000103 B9E000              <1> 	mov	cx, BPB_RootEntCnt
   403                              <1> 	
   404                              <1> 	.filename:
   405 00000106 51                  <1> 	push	cx
   406 00000107 56                  <1> 	push	si
   407 00000108 B90B00              <1> 		mov	cx, 11
   408                              <1> 	
   409 0000010B F3A6                <1> 		rep	cmpsb
   410 0000010D 740D                <1> 		je	.found
   411 0000010F 5E                  <1> 	pop	si
   412 00000110 59                  <1> 	pop	cx
   413                              <1> 	;Search next
   414 00000111 81E7E0FF            <1> 	and	di, 0FFE0h
   415 00000115 83C720              <1> 	add	di, byte 32
   416 00000118 E2EC                <1> 	loop .filename
   417                              <1> 	
   418                              <1> 	;File not found
   419 0000011A EBD3                <1> 	jmp	reboot
   420                              <1> 	
   421                              <1> 		.found:	
   422 0000011C 5E                  <1> 	pop	si
   423 0000011D 59                  <1> 	pop	cx	;fix stack
   424                              <1> 	
   425 0000011E 268B450F            <1> 	mov	ax, [es:di - 11 + DIR_FstClus]
   426                              <1> 	;ax = cluster
   427                              <1> 	
   428 00000122 68E01E              <1> 	push	word FAT_Seg
   429 00000125 07                  <1> 	pop	es
   430                              <1> 	
   431                              <1> 	
   432                              <1> 	.check:
   433                              <1> 	;Check cluster pointer
   434 00000126 3DF80F              <1> 	cmp	ax, 0FF8h		;EOF?
   435 00000129 732B                <1> 	jae	.done
   436 0000012B 3D0000              <1> 	cmp	ax, 0		;cluster 0 - error
   437 0000012E 7426                <1> 	je	.done
   438                              <1> 	
   439                              <1> 	;save cluster
   440 00000130 50                  <1> 	push	ax
   441 00000131 06                  <1> 	push	es
   442                              <1> 	
   443                              <1> 		;cluster to sector
   444 00000132 83C01F              <1> 		add	ax, byte FirstDataSector - 2
   445                              <1> 
   446                              <1> 		;load segment
   447                              <1> 		;es = segment
   448                              <1> 		;ax = sector
   449 00000135 8EC2                <1> 		mov	es, dx
   450 00000137 E84100              <1> 		call	Load_Sector
   451 0000013A 83C220              <1> 		add	dx, byte BPB_BytsPerSec / 10h
   452                              <1> 		
   453 0000013D 07                  <1> 	pop	es		
   454 0000013E 58                  <1> 	pop	ax
   455                              <1> 			
   456                              <1> 	;Get next cluster
   457 0000013F 89C3                <1> 	mov	bx, ax
   458 00000141 89C6                <1> 	mov	si, ax
   459 00000143 D1E8                <1> 	shr	ax, 1
   460 00000145 01C6                <1> 	add	si, ax	;si = ax + ax/2
   461 00000147 268B04              <1> 	mov	ax, [es:si]
   462 0000014A D1EB                <1> 	shr	bx, 1	;Test bit 0
   463 0000014C 7203                <1> 	jc	.odd
   464 0000014E C1E004              <1> 	shl	ax, 4
   465                              <1> 	.odd
   466 00000151 C1E804              <1> 	shr	ax, 4
   467                              <1> 	;ax = new cluster
   468 00000154 EBD0                <1> 	jmp	.check
   469                              <1> 		
   470                              <1> 	.done
   471 00000156 C3                  <1> ret
   472                              <1> 	
   473                              <1> 
   474                              <1> 
   475                              <1> ;Reset disk
   476                              <1> reset:
   477 00000157 B91000              <1> 	mov  cx, 10h   ;times to retry
   478                              <1> 	.loop:   ;Reset
   479 0000015A 51                  <1> 	push cx
   480                              <1> 
   481 0000015B 30E4                <1> 		xor  ah, ah	;00: reset disk
   482 0000015D B200                <1> 		mov	dl, BS_DrvNum	;dl=drive
   483 0000015F CD13                <1> 		int  13h	   ;Reset disk
   484 00000161 7202                <1> 		jc	.fail
   485 00000163 59                  <1> 	pop	cx
   486 00000164 C3                  <1> 	ret
   487                              <1> 
   488                              <1> 		;reset failure
   489                              <1> 		.fail:
   490 00000165 B078                <1> 		mov  al, 'x'
   491 00000167 E84D00              <1> 		call Cdisp
   492 0000016A 59                  <1> 	pop  cx
   493 0000016B E2ED                <1> 	loop .loop
   494 0000016D EB80                <1> 	jmp  reboot
   495                              <1> 
   496                              <1> ;INT 13 - DISK - RESET DISK SYSTEM
   497                              <1> ;	AH = 00h
   498                              <1> ;	DL = drive (if bit 7 is set both hard disks and floppy disks reset)
   499                              <1> ;Return: AH = status (see #0166)
   500                              <1> ;	CF clear if successful (returned AH=00h)
   501                              <1> ;	CF set on error
   502                              <1> 
   503                              <1> 
   504                              <1> Load_Sectors:
   505                              <1> 	;ax = start sector
   506                              <1> 	;cx = number of sectors
   507                              <1> 	;dx = segment
   508                              <1> 	.dir:
   509 0000016F 8EC2                <1> 	mov	es, dx
   510 00000171 E80700              <1> 	call	Load_Sector ;ax = sector number, es = target
   511 00000174 40                  <1> 	inc	ax
   512 00000175 83C220              <1> 	add	dx, byte BPB_BytsPerSec / 10h
   513 00000178 E2F5                <1> 	loop	.dir
   514 0000017A C3                  <1> 	ret
   515                              <1> 	
   516                              <1> 	
   517                              <1> ;Load 1 Sector
   518                              <1> ;es = segment
   519                              <1> ;ax = sector
   520                              <1> Load_Sector:
   521 0000017B 50                  <1> 	push	ax
   522 0000017C B02E                <1> 		mov	al, '.'
   523 0000017E E83600              <1> 		call Cdisp
   524 00000181 58                  <1> 	pop	ax
   525                              <1> 	
   526                              <1> 	;Try 10 times
   527 00000182 51                  <1> 	push	cx
   528 00000183 B90A00              <1> 		mov	cx, 10
   529                              <1> 		.retry:
   530 00000186 60                  <1> 		pusha
   531                              <1> 			
   532                              <1> 			;Check max number
   533 00000187 3D400B              <1> 			cmp	ax, BPB_TotSec16
   534 0000018A 7203                <1> 			jb	.chs
   535 0000018C E960FF              <1> 			jmp	reboot
   536                              <1> 			
   537                              <1> 			.chs:
   538                              <1> 			;Convert sector to CHS 
   539 0000018F 31D2                <1> 			xor	dx, dx
   540 00000191 BB1200              <1> 			mov	bx, BPB_SecPerTrk
   541 00000194 F7F3                <1> 			div	bx		;ax = ax / SectPerTrack
   542 00000196 88D1                <1> 			mov	cl, dl						;dx = ax % SectPerTrack
   543 00000198 FEC1                <1> 			inc	cl		;cl = Sector number(1-63)
   544                              <1> 						;assume dl = 0
   545 0000019A D1E8                <1> 			shr	ax, 1	;since BPB_NumHeads = 2
   546 0000019C D0D6                <1> 			rcl	dh, 1	;dh = head(0-1)
   547 0000019E 88C5                <1> 			mov	ch, al	;ch = cylinder/track
   548                              <1> 			
   549                              <1> 			;Drivenumber and memory location
   550 000001A0 B200                <1> 			mov	dl, BS_DrvNum
   551                              <1> 
   552 000001A2 31DB                <1> 			xor	bx, bx	;Offset, (es = segment)
   553 000001A4 B80102              <1> 			mov	ax, 0201h;low byte: number of sectors to read
   554                              <1> 			
   555 000001A7 CD13                <1> 			int  13h
   556 000001A9 7203                <1> 			jc	.error
   557 000001AB 61                  <1> 		popa
   558 000001AC 59                  <1> 	pop	cx
   559 000001AD C3                  <1> 	ret
   560                              <1> 
   561                              <1> 			.error:
   562 000001AE E8A6FF              <1> 			call	reset
   563 000001B1 61                  <1> 		popa
   564 000001B2 E2D2                <1> 		loop .retry
   565 000001B4 E938FF              <1> 		jmp	reboot
   566                              <1> 	
   567                              <1> 
   568                              <1> ;INT 13 - DISK - READ SECTOR(S) INTO MEMORY
   569                              <1> ;	AH = 02h
   570                              <1> ;	AL = number of sectors to read (must be nonzero)
   571                              <1> ;	CH = low eight bits of cylinder number
   572                              <1> ;	CL = sector number 1-63 (bits 0-5)
   573                              <1> ;		 high two bits of cylinder (bits 6-7, hard disk only)
   574                              <1> ;	DH = head number
   575                              <1> ;	DL = drive number (bit 7 set for hard disk)
   576                              <1> ;	ES:BX -> data buffer
   577                              <1> ;Return: CF set on error
   578                              <1> ;		if AH = 11h (corrected ECC error), AL = burst length
   579                              <1> ;	CF clear if successful
   580                              <1> ;	AH = status (see #0166)
   581                              <1> ;	AL = number of sectors transferred (only valid if CF set for some
   582                              <1> ;		  BIOSes)
   583                              <1> ;Notes:	errors on a floppy may be due to the motor failing to spin up quickly
   584                              <1> ;	  enough; the read should be retried at least three times, resetting
   585                              <1> ;	  the disk with AH=00h between attempts
   586                                  
   587                                  Cdisp: ;Display Character(al)
   588 000001B7 60                      	pusha
   589 000001B8 B40E                    		mov  ah, 0Eh
   590 000001BA CD10                    		int  10h
   591 000001BC 61                      	popa
   592 000001BD C3                      	ret
   593                                  	
   594                                  printstring:
   595 000001BE B40E                    	mov  ah, 0Eh
   596 000001C0 BB0700                  	mov  bx, 0007h
   597                                  nextcs:
   598 000001C3 AC                      	lodsb
   599 000001C4 CD10                    	int  10h	;Print to screen
   600 000001C6 E2FB                    	loop nextcs
   601 000001C8 C3                      	ret
   602                                  
   603 000001C9 4E414E4F5320202042-     nanos_loader:	db 'NANOS   BIN'
   604 000001D2 494E               
   605 000001D4 4E414E4F5320202044-     init_file:	db 'NANOS   DAT'
   606 000001DD 4154               
   607                                  
   608 000001DF 4C6F6164696E673A20      osstart:	db 'Loading: '
   609                                  osend:
   610                                  
   611                                  ;GDT
   612                                  align 4	;even 4 byte
   613                                  
   614                                  	nsel EQU 3
   615 000001E8 1700                    gdtr:	dw nsel*8-1	; GDT Limit
   616 000001EA E67D0000                	dd 	(gdt-8-$$) + 7c00h			; GDT Base
   617                                  
   618                                  	;Null selector
   619                                  	
   620                                  gdt:
   621                                  
   622                                  		;Data selector
   623 000001EE FFFF                    	dw 0FFFFh	;Limit
   624 000001F0 0000                    	dw 0		;Base0-15
   625 000001F2 00                      	db 0		;Base16-23
   626 000001F3 92                      	db 10010010b	;Present, DPL0 Writeable
   627 000001F4 CF                      	db 11001111b	;Granularity, Big, Limit
   628 000001F5 00                      	db 0		;Base24-31
   629                                  
   630                                  		;Code selector
   631 000001F6 FFFF                    	dw 0FFFFh	;Limit
   632 000001F8 0000                    	dw 0		;Base0-15
   633 000001FA 00                      	db 0		;Base16-23
   634 000001FB 9A                      	db 10011010b	;Present, DPL0 Readable
   635 000001FC CF                      	db 11001111b	;Granularity, Big, Limit
   636 000001FD 00                      	db 0		;Base24-31
   637                                  
   638                                  end:	 ;boot sign, so that the bios will boot on the drive
   639                                  	times 200h-2-($-$$)	 db 0h
   640 000001FE 55AA                    	db 55h, 0AAh
